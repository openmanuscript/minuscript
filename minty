#!/usr/bin/env python3.3

# ---------------------------------------------------------------------------
#
# minty, a tiny manuscript tool
#
# ---------------------------------------------------------------------------
"""
Copyright (c) 2016, David H. Rogers 
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

import argparse
import configparser
import json
import textwrap

# ---------------------------------------------------------------------------
#
# get initial settings from settings file, if there is one
#
# ---------------------------------------------------------------------------
conf_parser = argparse.ArgumentParser(
    # Turn off help, so we print all options in response to -h
    add_help=False
    )

args, remaining_argv = conf_parser.parse_known_args()

# you can set stuff here, but we're not  currently using this
# defaults = {
#     "sourcedir" : "defaultSourcedir",
#     "author"    : "defaultAuthor",
#     }

# SHORT CIRCUIT
# currently not implementing this, until the following work correctly:
#   1. full command line options
#   2. run-in-the-directory mode, in which the script is run in a 
#      manuscript directory, and all the data is local
#
#if args.conf_file:
#    config = ConfigParser.SafeConfigParser()
#    config.readfp(open(args.conf_file))
#    defaults = dict(config.items("Default"))


# ---------------------------------------------------------------------------
#
# command line options
#
# ---------------------------------------------------------------------------
# Don't surpress add_help here so it will handle -h
parser = argparse.ArgumentParser(
    # Don't mess with format of description
    formatter_class=argparse.RawDescriptionHelpFormatter,
    # Inherit options from config_parser
    parents=[conf_parser],
    # print script description with -h/--help
    epilog=textwrap.dedent('''\
        examples:
        
          minty --manuscriptfile novel.json 
            will parse novel.json for information about the novel, 
            instead of the default

            ''')
)
# parser.set_defaults(**defaults)
parser.add_argument( "--authorfile", default="author.json",
    help="read author data from this file")
parser.add_argument( "--manuscriptfile", default="manuscript.json", 
    help="read manuscript definition from this file")
parser.add_argument( "--outputfile", default="manuscript.rtf", 
    help="write output to this file")

args = parser.parse_args(remaining_argv)


FONT = {
    "size"   : "24",
    "family" : "Courier"
}

MARGIN = {
    "t" : "1440",
    "b" : "1440",
    "l" : "1440",
    "r" : "1440"
}

SPACING = {
    "paragraph" : "480", # Does this work?
    "parindent" : "720",
    "newchapb"  : "3600",
    "newchapa"  : "360",
    "chapsuba"  : "720",
    "titleskip" : "3600"
}

TEST_SCENE = "Urbem Romam a principio reges habuere; libertatem etconsulatum L. Brutus instituit. dictaturae ad tempussumebantur; neque decemviralis potestas ultra biennium,neque tribunorum militum consulare ius diu valuit. Non Cinnae, non Sullae longa dominatio; et Pompei Crassique potentia cito in  Caesarem, Lepidi atque Antonii arma in Augustum cessere, qui cuncta discordiis civilibus fessa nomine principis sub imperium accepit."

# -----------------------------------------------------------------------------
# write document preamble
# -----------------------------------------------------------------------------
def write_preamble( f ):
    f.write("""{{\\rtf1 \\titlepg \\ansi \\margt{0} \\margb{1} \\margl{2}
    \\margr{3} \\pgnrestart \\pgnstarts0
{{\\fonttbl {{\\f0 \\fmodern \\fcharset0 {4};}}}}
\n""".format(MARGIN["t"], MARGIN["b"], MARGIN["l"], MARGIN["r"],
             FONT["family"]))

# -----------------------------------------------------------------------------
# write the common headers on all pages
# -----------------------------------------------------------------------------
def write_headers( f, author, manuscript ):
    f.write("{\\headerf \\pard \\qr \\par}\n")
    f.write("{{\\header \\pard \\qr {0} / {1} / \\chpgn \\par}}\n".format(author["surname"], manuscript["runningtitle"].upper()))

# -----------------------------------------------------------------------------
# write the word count
# -----------------------------------------------------------------------------
def write_wordcount( f, numwords ):
    f.write("""
\\pard \\f0 \\fs{0} \\qr
approx. {1} words
\\par
\n""".format(FONT["size"], str(numwords)))

# -----------------------------------------------------------------------------
# write the author information
# -----------------------------------------------------------------------------
def write_author( f, author ):
    f.write("""
\\pard \\f0 \\fs{0} \\ql
{1} \\
{2} \\
{3}, {4} {5} \\
{6} \\
{7}
\\par
\n""".format(FONT["size"], author["name"], author["address"], author["city"], author["state"],
author["zip"], author["email"], author["phone"]))

# -----------------------------------------------------------------------------
# write the title
# -----------------------------------------------------------------------------
def write_title(f, manuscript, author):
    f.write("""
\\pard \\f0 \\fs{0} \\sl{1} \\slmulti1 \\sb{2} \\qc {3} \\par
\\pard \\f0 \\fs{4} \\sl{5} \\slmulti1 \\qc by \\
{6}\\
\par\n""".format(FONT["size"], SPACING["paragraph"], SPACING["titleskip"],
manuscript["title"], FONT["size"],
SPACING["paragraph"], author["name"]))

# -----------------------------------------------------------------------------
# finish things up and make a valid document
# -----------------------------------------------------------------------------
def write_postamble(f):
    f.write("\n}\n")

# -----------------------------------------------------------------------------
# write chapter headings
# -----------------------------------------------------------------------------
def write_chapter_heading(f, chapter, chapnum):
    chapnum = "CHAPTER {0}".format(chapnum)
    f.write("""
\\pard \\pagebb \\f0 \\fs{0} \\sl{1} \\slmulti1 \\qc \\sb{2} \\sa{3} {{\\b {4} }}
\\par
\\pard \\f0 \\fs{5} \\sl{6} \\slmulti1 \\qc \\sa{7} {{\\b {8} }}
\par\n""".format(FONT["size"], SPACING["paragraph"], SPACING["newchapb"],
SPACING["newchapa"], chapnum.upper(), FONT["size"], SPACING["paragraph"],
SPACING["chapsuba"], chapter["title"]))

# -----------------------------------------------------------------------------
# write a single chapter
# -----------------------------------------------------------------------------
def write_chapter(f, chapter, chapnum):
    write_chapter_heading(f, chapter, chapnum)
    for scene in chapter["scenes"]:
        write_scene(f, scene)
        write_scene_separator(f)

# -----------------------------------------------------------------------------
# write a single scene 
# -----------------------------------------------------------------------------
def write_scene(f, scene):
    f.write("""
\\pard \\fi{0} \\sl{1} \\slmult1 \\f0 \\fs{2}
{3}
\\par""".format(SPACING["parindent"], SPACING["paragraph"], FONT["size"], TEST_SCENE))

# -----------------------------------------------------------------------------
# write a scene separator
# -----------------------------------------------------------------------------
#TODO: add SPACING, etc. in this 
def write_scene_separator(f):
    f.write("\n\\pard \\sl480 \\slmulti1 \\qc \\sa720 ### \\par\n")

# -----------------------------------------------------------------------------
# iterate and write all the chapters
# -----------------------------------------------------------------------------
def write_chapters(f, manuscript):
    chapnum = 1
    for chapter in manuscript["chapters"]:
        write_chapter(f, chapter, chapnum)
        chapnum += 1

# temporary values
numwords = 2700

# -----------------------------------------------------------------------------
#
# execute
#
# -----------------------------------------------------------------------------

# read in required data, checking validity
with open( args.authorfile ) as author_file:
    author_data = json.load( author_file )

with open( args.manuscriptfile ) as ms_file:
    ms_data = json.load( ms_file )

# write the file
with open( args.outputfile, "w" ) as f:
    write_preamble(f)
    write_headers(f, author_data["author"], ms_data["manuscript"])
    write_wordcount(f, numwords)
    write_author(f, author_data["author"])
    write_title(f, ms_data["manuscript"], author_data["author"])
    write_chapters(f, ms_data["manuscript"])
    write_postamble(f)

