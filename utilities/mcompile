#!/usr/bin/env python3

# ---------------------------------------------------------------------------
#
# minuscript, a minimal manuscript tool
#
# ---------------------------------------------------------------------------
"""
Copyright (c) 2016, David H. Rogers 
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""
# ---------------------------------------------------------------------------

import argparse
import configparser
import json
import os
import sys
import textwrap

APP_input    = "products.json"
APP_products = "" 

# ---------------------------------------------------------------------------
#
# get initial settings from settings file, if there is one
#
# ---------------------------------------------------------------------------
conf_parser = argparse.ArgumentParser(
    # Turn off help, so we print all options in response to -h
    add_help=False
    )

args, remaining_argv = conf_parser.parse_known_args()

# ---------------------------------------------------------------------------
#
# command line options
#
# ---------------------------------------------------------------------------
# Don't surpress add_help here so it will handle -h
parser = argparse.ArgumentParser(
    # Don't mess with format of description
    formatter_class=argparse.RawDescriptionHelpFormatter,
    # Inherit options from config_parser
    parents=[conf_parser],
    # print script description with -h/--help
    epilog=textwrap.dedent('''\
        examples:
        
          mcompile 
            print the list of targets that can be compiled.

          mcompile <target> 
            look in the local products.json file, and compile
            target <target> if it exists. If it doesn't exist,
            exit and report list of possible targets.

            ''')
)
# parser.set_defaults(**defaults)
parser.add_argument( "-d", "--debug", action="store_true", default=False,
    help="run in debug mode: create all files, but do not clean up after pdf is created.")
parser.add_argument( "-v", "--verbose", action="store_true", default=False,
    help="report verbosely")
parser.add_argument( "target", nargs="?", help="name of target to compile" )

args = parser.parse_args(remaining_argv)

# do the work
notFound = True

if (len(args.target) == 0 ): 
    print("help message")
    exit(0)

if not os.path.isfile(APP_input):
    print("ERROR: can't find expected file: " + APP_input)
    exit(0)

with open( APP_input ) as products_file:
    products_data = json.load( products_file )

for p in products_data["outputs"]:

    APP_products += p["name"] + " "
    if (p["name"] == args.target):
        # required
        command = "minuscript --manuscriptfile " + p["manuscriptfile"] + " --author " + p["authorfile"] 

        # optional
        if "output" in p:
            command += " --manuscriptname " + p["output"]

        if "wordcount" in p:
            command += " --wordcount"

        print(command)
        notFound = False

if (notFound):
    print("target \"" + args.target + "\" not found. Valid targets: " + APP_products)
